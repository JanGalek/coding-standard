parameters:
	indentation: tab

checkers:
	# Checkers bellow aim on 1:1 copy of https://nette.org/en/coding-standard

	# General rules - https://nette.org/en/coding-standard#toc-general-rules

	# max line length limit is 120 characters
	PHP_CodeSniffer\Standards\Generic\Sniffs\Files\LineLengthSniff:
		absoluteLineLimit: 120
	# use tabs over spaces
	- PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\DisallowSpaceIndentSniff
	# PHP code must use only UTF-8 without BOM
	- PhpCsFixer\Fixer\Basic\EncodingFixer
	# <?php opening tag
	- PhpCsFixer\Fixer\PhpTag\FullOpeningTagFixer
	# The closing ?> tag must be omitted from files containing only PHP.
	- PhpCsFixer\Fixer\PhpTag\NoClosingTagFixer
	# There must not be trailing whitespace at the end of lines.
	- PhpCsFixer\Fixer\Whitespace\NoTrailingWhitespaceFixer
	# All files must end with a single blank line.
	- PHP_CodeSniffer\Standards\PSR2\Sniffs\Files\EndFileNewlineSniff
	# File name should match class name if possible.
	- PhpCsFixer\Fixer\Basic\Psr4Fixer
	# Enforces using shorthand scalar typehint variants in phpDocs: `int` instead of `integer` and `bool` instead of `boolean`
	- SlevomatCodingStandard\Sniffs\TypeHints\LongTypeHintsSniff

	# File Header - https://nette.org/en/coding-standard#toc-file-header

	# empty line before namespace
	- PhpCsFixer\Fixer\NamespaceNotation\SingleBlankLineBeforeNamespaceFixer
	# 1 Use statement per line
	- PhpCsFixer\Fixer\Import\SingleImportPerStatementFixer
	# Use statements are alphabetically ordered
	- PhpCsFixer\Fixer\Import\OrderedImportsFixer
	# disallow group use declarations use FooLibrary\Bar\Baz\{ ClassA, ClassB, ClassC, ClassD as Fizbo }
	- SlevomatCodingStandard\Sniffs\Namespaces\DisallowGroupUseSniff
	# Disallows leading backslash in use statement: use \Foo\Bar;
	- SlevomatCodingStandard\Sniffs\Namespaces\UseDoesNotStartWithBackslashSniff
	# Looks for unused imports from other namespaces.
	SlevomatCodingStandard\Sniffs\Namespaces\UnusedUsesSniff:
		searchAnnotations: yes

	# Arrays - https://nette.org/en/coding-standard#toc-arrays

	# use short array fixes
	PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
		syntax: short
	# use trailing command in last array element
	- PhpCsFixer\Fixer\ArrayNotation\TrailingCommaInMultilineArrayFixer

	# Keywords and True/False/Null - https://nette.org/en/coding-standard#toc-keywords-and-true-false-null

	# PHP keywords must be in lower case
	- PhpCsFixer\Fixer\Casing\LowercaseKeywordsFixer
	# TRUE, FALSE, and NULL must be upper case
	- PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\UpperCaseConstantSniff

	# Method and Functions Calls - https://nette.org/en/coding-standard#toc-method-and-function-calls

	# No space after the opening parenthesis and before the closing parenthesis
	- PhpCsFixer\Fixer\Whitespace\NoSpacesInsideParenthesisFixer
	# In the argument list, there must be one space after each comma, and there must no be a space before each comma
	- PhpCsFixer\Fixer\FunctionNotation\MethodArgumentSpaceFixer

	# Classes - https://nette.org/en/coding-standard#toc-classes

	# class element order: constants, properties, from public to private
	PhpCsFixer\Fixer\ClassNotation\OrderedClassElementsFixer:
		order:
			- use_trait
			- constant
			- constant_public
			- constant_protected
			- constant_private
			- property_public
			- property_protected
			- property_private

	# Constants - https://nette.org/en/coding-standard#toc-constants

	# constant names are CAPITALIZED (manuall fixing only :()
	- PHP_CodeSniffer\Standards\Generic\Sniffs\NamingConventions\UpperCaseConstantNameSniff

	# Class Properties - https://nette.org/en/coding-standard#toc-class-properties

	# Methods - https://nette.org/en/coding-standard#toc-methods

	# They must be declared in camelCase.
	- PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff
	# Checks that there's a single space between a typehint and a parameter name and no whitespace between a nullability symbol and a typehint
	- SlevomatCodingStandard\Sniffs\TypeHints\ParameterTypeHintSpacingSniff

	# Constans, Class Properties, Methods

	# All Class and Trait elements should have visibility required
	Nette\CodingStandard\Fixer\ClassNotation\ClassAndTraitVisibilityRequiredFixer:
		elements: [property, method]

	# Control Statements - https://nette.org/en/coding-standard#toc-control-statements

	# The structure body must be indented once.
	# The closing brace must be on the next line after the body.
	# There should not be more than one statement per line.
	Nette\CodingStandard\Fixer\Basic\BracesFixer:
		allow_single_line_closure: yes
	# changes if (1 === $cond) to if ($cond === 1)
	- SlevomatCodingStandard\Sniffs\ControlStructures\YodaComparisonSniff
	# finds unreachable catch blocks:
	- SlevomatCodingStandard\Sniffs\Exceptions\DeadCatchSniff
